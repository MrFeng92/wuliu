<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
	http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
    <!-- 配置Spring监听器 -->

    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!-- 指定加载Spring的核心配置文件 -->

    <context-param>
        <!-- contextConfigLocation这个名字写死 -->
        <param-name>contextConfigLocation</param-name>
        <!-- applicationContext*.xml *别落了 -->
        <param-value>classpath:spring/applicationContext*.xml</param-value>
    </context-param>


    <!-- 编码过滤器，以UTF8编码 -->
    <filter>
        <filter-name>encodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- 配置shiro的Filter -->
    <filter>
        <!-- 注意，filter-name要和shiro-spring整合文件的filter的bean的id一致 -->
        <filter-name>shiroFilter</filter-name>
        <!-- 这个类，是Spring根据配置文件 bean id的名字，来生成filter的代理类 -->
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
        <init-param>
            <!-- Spring生成Filter代理类之后，这个代理类的生命周期默认是Spring来管理的
             为了让Filter生效，我们需要把这个Filter交个Servlet容器来管理 -->
            <param-name>targetFilterLifecycle</param-name>
            <!-- 改成true，表示交给Servlet容器来管理 -->
            <param-value>true</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>shiroFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>


    <!-- 配置SpringMVC核心入口类 -->
    <servlet>
        <servlet-name>smvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring/springmvc-config.xml</param-value>
        </init-param>
        <!-- 如果想让Servlet在容器的启动的时候就开始工作，
        <load-on-startup>1</load-on-startup>
        数字的含义：只要数字大于0，就是表示随容器启动而启动 -->
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>smvc</servlet-name>
        <!-- /拦截所有请求,注意：如果配置成/,会把所有的静态资源文件拦截
        第一种解决方式：配置成*.action 但是访问路径写的比较麻烦，不建议使用-->
        <url-pattern>/</url-pattern>
    </servlet-mapping>
    <welcome-file-list>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>

</web-app>
